[{"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\index.js":"1","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\App.js":"2","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Error\\Error.js":"3","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\FocusColor\\FocusColor.js":"4","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\FocusColor\\FocusColorElement.js":"5","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Games Page\\Games.js":"6","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Home\\Home.js":"7","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Spot Up\\SpotUp.js":"8"},{"size":222,"mtime":1609486576505,"results":"9","hashOfConfig":"10"},{"size":751,"mtime":1612796460277,"results":"11","hashOfConfig":"10"},{"size":431,"mtime":1612799936016,"results":"12","hashOfConfig":"10"},{"size":870,"mtime":1612808203245,"results":"13","hashOfConfig":"10"},{"size":4454,"mtime":1612514993702,"results":"14","hashOfConfig":"10"},{"size":2695,"mtime":1614068125567,"results":"15","hashOfConfig":"10"},{"size":1521,"mtime":1614067597627,"results":"16","hashOfConfig":"10"},{"size":4318,"mtime":1614073691980,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1derpe2",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\index.js",[],["40","41"],"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\App.js",[],"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Error\\Error.js",[],"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\FocusColor\\FocusColor.js",["42"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FocusColorElement from \"./FocusColorElement\";\r\nimport \"./FocusColor.css\";\r\n\r\nfunction FocusColor() {\r\n  const [counter, setCounter] = useState(5);\r\n  const [scoreCard, setScoreCard] = useState(0);\r\n\r\n  useEffect(() => {\r\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\r\n  }, [counter]);\r\n\r\n  return (\r\n    <div>\r\n      <span className=\"top-bar\">\r\n        <Link to=\"/games\" className=\"back-button\">\r\n          <h1>GAMES</h1>\r\n        </Link>\r\n        <h1>&nbsp;/&nbsp;FOCUS COLOR</h1>\r\n      </span>\r\n      {counter == 0 ? (\r\n        <FocusColorElement scoreCard={scoreCard} setScoreCard={setScoreCard} />\r\n      ) : (\r\n        <p className=\"countdown-fc\">Game Starts in: {counter} </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusColor;\r\n","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\FocusColor\\FocusColorElement.js",["43","44"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./FocusColor.css\";\r\nfunction FocusColorElement({ scoreCard, setScoreCard }) {\r\n  const [questionColor, setQuestionColor] = useState(\"\");\r\n\r\n  const colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Pink\", \"Purple\", \"Brown\"];\r\n  var randomColorGenerator1,\r\n    randomTextGenerator1,\r\n    randomColorGenerator2,\r\n    randomTextGenerator2,\r\n    randomColorGenerator3,\r\n    randomTextGenerator3,\r\n    randomColorGenerator4,\r\n    randomTextGenerator4,\r\n    randomColorGenerator5,\r\n    randomTextGenerator5,\r\n    randomColorGenerator6,\r\n    randomTextGenerator6,\r\n    randomColorGenerator7,\r\n    randomTextGenerator7;\r\n  var textGenerator;\r\n  var arr_text = [];\r\n  var arr_color = [];\r\n\r\n  while (arr_text.length < 7) {\r\n    var r = Math.floor(Math.random() * colors.length);\r\n    if (arr_text.indexOf(r) === -1) arr_text.push(r);\r\n  }\r\n  while (arr_color.length < 7) {\r\n    var r = Math.floor(Math.random() * colors.length);\r\n    if (arr_color.indexOf(r) === -1) arr_color.push(r);\r\n  }\r\n\r\n  console.log(arr_text);\r\n  randomColorGenerator1 = colors[arr_color[0]];\r\n  randomTextGenerator1 = colors[arr_text[0]];\r\n  randomColorGenerator2 = colors[arr_color[1]];\r\n  randomTextGenerator2 = colors[arr_text[1]];\r\n  randomColorGenerator3 = colors[arr_color[2]];\r\n  randomTextGenerator3 = colors[arr_text[2]];\r\n  randomColorGenerator4 = colors[arr_color[3]];\r\n  randomTextGenerator4 = colors[arr_text[3]];\r\n  randomColorGenerator5 = colors[arr_color[4]];\r\n  randomTextGenerator5 = colors[arr_text[4]];\r\n  randomColorGenerator6 = colors[arr_color[5]];\r\n  randomTextGenerator6 = colors[arr_text[5]];\r\n  randomColorGenerator7 = colors[arr_color[6]];\r\n  randomTextGenerator7 = colors[arr_text[6]];\r\n\r\n  textGenerator = [\r\n    randomTextGenerator1,\r\n    randomTextGenerator2,\r\n    randomTextGenerator3,\r\n    randomTextGenerator4,\r\n    randomTextGenerator5,\r\n    randomTextGenerator6,\r\n    randomTextGenerator7,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    var q_color =\r\n      textGenerator[Math.floor(Math.random() * textGenerator.length)];\r\n    setQuestionColor(q_color);\r\n    var msg = new SpeechSynthesisUtterance();\r\n    var voices = window.speechSynthesis.getVoices();\r\n    msg.voice = voices[Math.floor(Math.random() * voices.length)];\r\n    msg.text = q_color;\r\n    console.log(q_color);\r\n    speechSynthesis.speak(msg);\r\n  }, [scoreCard]);\r\n\r\n  function handleClick(e) {\r\n    if (e.target.innerText === questionColor) {\r\n      setScoreCard(scoreCard + 1);\r\n    } else {\r\n      setScoreCard(0);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"button-fc\">\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator1 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator1}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator2 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator2}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator3 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator3}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator4 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator4}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator5 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator5}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator6 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator6}</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"play-fc\">\r\n        <button className=\"play-now-fc\" style={{ color: randomColorGenerator7 }} onClick={handleClick}>\r\n        <p className=\"play-now-text-fc\">{randomTextGenerator7}</p>\r\n        </button>\r\n      </div>\r\n      </div>\r\n      <br />\r\n      <p className=\"score-fc\">\r\n      Your score is: {scoreCard}\r\n      </p>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusColorElement;\r\n",["45","46"],"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Games Page\\Games.js",["47"],"import { Link } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport \"./Games.css\";\r\n\r\n\r\nfunction Games() {\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"container\">\r\n        <span className=\"top-bar\">\r\n          <Link to=\"/\" className=\"back-button\">\r\n            <h1>Brain Food </h1>\r\n          </Link>\r\n          <h1>&nbsp;/&nbsp;GAMES</h1>\r\n        </span>\r\n        <h2>Activate your skills. Play small, quick and mind-boggling games</h2>\r\n        <div className=\"row\">\r\n          <div className=\"game-card column\">\r\n            <h3>SPOT UP</h3>\r\n            <b>\r\n              This brain teaser challenges your mental vitality and flexibility\r\n              to adapt to changes.\r\n            </b>\r\n            <br />\r\n            <b>Rules</b>\r\n            <p>\r\n              1. There will be a grid of numbers which reshuffle after every\r\n              click.\r\n            </p>\r\n            <p>2. Numbers in the grid appear randomly from 0 to 24.</p>\r\n            <p>\r\n              3. A number appears separately, you find and click that number in\r\n              the grid.\r\n            </p>\r\n            <p>4. For every wrong click, you commence from zero.</p>\r\n            <p>5. You win the game when you reach the last number, 24.</p>\r\n            <div className=\"play-1\">\r\n              <button className=\"play-now-1\">\r\n                <Link to=\"/SpotUp\">\r\n                  <p className=\"play-now-text-1\">Play</p>\r\n                </Link>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"game-card column\">\r\n            <h3>FOCUS COLOR</h3>\r\n            <b>Sharpen your brain cells and test your wit!</b>\r\n            <br />\r\n            <br />\r\n            <b>Rules</b>\r\n            <p>\r\n              1. Click on the \"text\" of the color that is called out and not the\r\n              color in which the text is written.\r\n              <br /> For example, if \"blue\" is called out you click on the word\r\n              \"blue\" ignoring the color in which it is written.\r\n            </p>\r\n            <p>2. You score a point for every correct click.</p>\r\n            <p>3. For every wrong click, you're back to zero.</p>\r\n            <br />\r\n            <div className=\"play-1\">\r\n              <button className=\"play-now-1\">\r\n                <Link to=\"/focuscolor\">\r\n                  <p className=\"play-now-text-1\">Play</p>\r\n                </Link>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-foot\">\r\n        <p> &#169;BrainFood</p>\r\n        <p>Made by Divit Agrawal</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Games;\r\n","C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Home\\Home.js",[],"C:\\Users\\lehovo\\Desktop\\VS CODE FOLDERS\\WEB DEV\\BrainFood\\src\\Components\\Spot Up\\SpotUp.js",["48","49","50","51"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SpotUp.css\";\r\nfunction SpotUp() {\r\n  const [countChecker, setCountChecker] = useState(0);\r\n  const [timer, setTimer] = useState(5);\r\n\r\n  const numbers = [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    15,\r\n    16,\r\n    17,\r\n    18,\r\n    19,\r\n    20,\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n  ];\r\n\r\n  var arr = [];\r\n\r\n  const handleClick = (e) => {\r\n    let audio = new Audio(\"../audios/clicksound.mp3\");\r\n    audio.play();\r\n    if (e.target.innerText == countChecker) {\r\n      if (countChecker < 24) {\r\n        setCountChecker((prev) => prev + 1);\r\n      } else {\r\n        let vict = new Audio(\"../audios/victory.mp3\");\r\n        vict.play();\r\n        setCountChecker((prev) => prev + 1);\r\n      }\r\n      setTimer(5);\r\n    } else {\r\n      setCountChecker(0);\r\n      setTimer(0);\r\n    }\r\n  };\r\n\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n  const [a, seta] = useState([0, 0, 0, 0, 0]);\r\n  const [b, setb] = useState([0, 0, 0, 0, 0]);\r\n  const [c, setc] = useState([0, 0, 0, 0, 0]);\r\n  const [d, setd] = useState([0, 0, 0, 0, 0]);\r\n  const [e, sete] = useState([0, 0, 0, 0, 0]);\r\n\r\n  const countDn = () => {\r\n    setInterval(\r\n      () =>\r\n        setTimer((prev) => {\r\n          if (prev > 0) {\r\n            return prev - 1;\r\n          } else {\r\n            return prev;\r\n          }\r\n        }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    while (arr.length < 25) {\r\n      var r = Math.floor(Math.random() * numbers.length);\r\n      if (arr.indexOf(r) === -1) arr.push(r);\r\n    }\r\n    seta([...arr.slice(0, 5)]);\r\n    setb([...arr.slice(5, 10)]);\r\n    setc([...arr.slice(10, 15)]);\r\n    setd([...arr.slice(15, 20)]);\r\n    sete([...arr.slice(20, 25)]);\r\n  }, [countChecker]);\r\n\r\n  useEffect(() => {\r\n    countDn();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <span className=\"top-bar\">\r\n        <Link to=\"/games\" className=\"back-button\">\r\n          <h1>GAMES</h1>\r\n        </Link>\r\n        <h1>&nbsp;/&nbsp;SPOT UP</h1>\r\n      </span>\r\n      {countChecker <= 24 ? (\r\n        timer != 0 ? (\r\n          <div className=\"to-press\">Timer : {timer}</div>\r\n        ) : (\r\n          <p className=\"to-press\">Time's Up</p>\r\n        )\r\n      ) : (\r\n        <p></p>\r\n      )}\r\n      <p className=\"to-press\">\r\n        {countChecker <= 24 ? <p>Find {countChecker}</p> : <p>Congratulations!</p>}\r\n      </p>\r\n      {timer != 0 ? (\r\n        <div className=\"status\">\r\n          <div className=\"board-row\">\r\n            {a.map((ele) => {\r\n              return (\r\n                <button className=\"square\" onClick={handleClick}>\r\n                  {ele}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {b.map((ele) => {\r\n              return (\r\n                <button className=\"square\" onClick={handleClick}>\r\n                  {ele}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {c.map((ele) => {\r\n              return (\r\n                <button className=\"square\" onClick={handleClick}>\r\n                  {ele}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {d.map((ele) => {\r\n              return (\r\n                <button className=\"square\" onClick={handleClick}>\r\n                  {ele}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {e.map((ele) => {\r\n              return (\r\n                <button className=\"square\" onClick={handleClick}>\r\n                  {ele}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p className=\"to-press\">GAME OVER!</p>\r\n      )}\r\n      {/* <span>{timer == 0 ? <p>GAME OVER! </p> : <p></p>}</span> */}\r\n      <div className=\"play-su\">\r\n        <button className=\"play-now-su\" onClick={refreshPage}>\r\n          <p className=\"play-now-text-su\">Play Again</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpotUp;\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":22,"column":16,"nodeType":"58","messageId":"59","endLine":22,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":30,"column":9,"nodeType":"62","messageId":"63","endLine":30,"endColumn":10},{"ruleId":"64","severity":1,"message":"65","line":70,"column":6,"nodeType":"66","endLine":70,"endColumn":17,"suggestions":"67"},{"ruleId":"52","replacedBy":"68"},{"ruleId":"54","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":17,"nodeType":"62","messageId":"72","endLine":2,"endColumn":25},{"ruleId":"56","severity":1,"message":"57","line":41,"column":28,"nodeType":"58","messageId":"59","endLine":41,"endColumn":30},{"ruleId":"64","severity":1,"message":"73","line":90,"column":6,"nodeType":"66","endLine":90,"endColumn":20,"suggestions":"74"},{"ruleId":"56","severity":1,"message":"75","line":105,"column":15,"nodeType":"58","messageId":"59","endLine":105,"endColumn":17},{"ruleId":"56","severity":1,"message":"75","line":116,"column":14,"nodeType":"58","messageId":"59","endLine":116,"endColumn":16},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'r' is already defined.","Identifier","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'textGenerator'. Either include it or remove the dependency array.","ArrayExpression",["78"],["76"],["77"],"no-unused-vars","'useState' is defined but never used.","unusedVar","React Hook useEffect has missing dependencies: 'arr' and 'numbers.length'. Either include them or remove the dependency array.",["79"],"Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [scoreCard, textGenerator]",{"range":"84","text":"85"},"Update the dependencies array to be: [arr, countChecker, numbers.length]",{"range":"86","text":"87"},[2362,2373],"[scoreCard, textGenerator]",[1881,1895],"[arr, countChecker, numbers.length]"]